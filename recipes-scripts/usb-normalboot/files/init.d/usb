#!/bin/sh
#
# Copyright (c) 2012-2015, The Linux Foundation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of The Linux Foundation nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE DISCLAIMED.  IN NO
# EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Starts the USB Android Gadget.

# Run adbcheck and store return value in adb_setting for use in shell script
/usr/bin/adbcheck
adb_setting=$(echo $?)
/usr/bin/audiocheck
aud_setting=$(echo $?)
/usr/bin/ncmcheck
ncm_setting=$(echo $?)

GADGET_FUNC="diag,serial,rmnet"
if [ "$adb_setting" = "1" ];
then 
    GADGET_FUNC="$GADGET_FUNC,ffs"
fi 

if [ "$aud_setting" = "1" ];
then 
    GADGET_FUNC="$GADGET_FUNC,audio"
fi 

if [ "$ncm_setting" = "1" ];
then 
    GADGET_FUNC="$GADGET_FUNC,ncm"
fi 

case "$1" in
    start)
        if [ -d /sys/class/android_usb/android0/f_ffs ]
        then
            echo adb > /sys/class/android_usb/android0/f_ffs/aliases
        fi
        
        # get soc platform to update product related information
        if [ -f /sys/devices/soc0/hw_platform ]; then
            socplatform=$(cat /sys/devices/soc0/machine) 2> /dev/null
            soc_hwplatform=$(cat /sys/devices/soc0/hw_platform)
        else
            socplatform=$(cat /sys/devices/system/soc/soc0/machine) 2> /dev/null
        fi
        
        msm_serial=$(cat /sys/devices/soc0/serial_number)
        msm_serial_hex=$(printf %08X "$msm_serial")
        product_string="$socplatform-$soc_hwplatform _SN:$msm_serial_hex"
        ncm_ethaddr=$(printf dead%08x "$msm_serial" | awk '{gsub(/..\B/,"&:")}1')
        
        if [ -d /sys/class/android_usb/android0 ]
        then
            echo "$product_string" > /sys/class/android_usb/android0/iProduct
        fi
        
        # mount functionfs
        mkdir -p /dev/usb-ffs/adb
        mount -o uid=2000,gid=2000 -t functionfs adb /dev/usb-ffs/adb
        echo adb > /sys/class/android_usb/android0/f_ffs/aliases
        echo ffs > /sys/class/android_usb/android0/functions
        
        echo 0 > /sys/class/android_usb/android0/enable
        echo 0125 > /sys/class/android_usb/android0/idProduct
        echo 2C7C > /sys/class/android_usb/android0/idVendor
        echo diag > /sys/class/android_usb/android0/f_diag/clients
        echo 239 > /sys/class/android_usb/android0/bDeviceClass
        echo 2 > /sys/class/android_usb/android0/bDeviceSubClass
        echo 1 > /sys/class/android_usb/android0/bDeviceProtocol
        echo tty,smd,smd > /sys/class/android_usb/android0/f_serial/transports
        echo QTI,BAM_DMUX > /sys/class/android_usb/android0/f_rmnet/transports
        echo BAM_DMUX > /sys/class/android_usb/android0/f_usb_mbim/mbim_transports
        while [ ! -e /dev/snd/controlC0 ]                                   
        do                                                                      
            echo "Audio not ready yet, waiting..." > /dev/kmsg                  
            sleep 0.1                              
        done  
        echo $GADGET_FUNC > /sys/class/android_usb/android0/functions
        echo 1 > /sys/class/android_usb/android0/remote_wakeup
        echo 1 > /sys/class/android_usb/android0/f_rndis/wceis
        echo "Quectel, Incorporated" > /sys/class/android_usb/android0/iManufacturer
        echo "LTE Module" > /sys/class/android_usb/android0/iProduct
        echo "community_fw" > /sys/class/android_usb/android0/iSerial
        echo 1 > /sys/class/android_usb/android0/f_rndis/wceis
        echo $ncm_ethaddr > /sys/class/android_usb/android0/f_ncm/ncm_ethaddr
        echo 1 > /sys/class/android_usb/android0/enable
        if [ "$adb_setting" = "1" ];
        then 
            /etc/init.d/adbd start
        fi 

        if [ "$ncm_setting" = "1" ];
        then 
            /etc/init.d/ncm_udhcpc start
        fi 

    ;;
    
    stop)
        echo "Stopping USB Android Gadget" > /dev/kmsg
        /etc/init.d/adbd stop
        /etc/init.d/ncm_udhcpc stop
        echo 0 > /sys/class/android_usb/android0/enable
    ;;
    
    restart)
        $0 stop
        $0 start
    ;;
    *)
        echo "Usage usb { start | stop | restart}" >&2
        exit 1
    ;;
esac